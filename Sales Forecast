{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "147q9AYrm_zb_su0oEU1Wm2EKZytfBXT3",
      "authorship_tag": "ABX9TyMjB3BXdLuUVAzUXByDSycQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/roliveira15/Data_Science_Sales_Forecast/blob/main/Sales%20Forecast\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Carregando as bibliotecas"
      ],
      "metadata": {
        "id": "MD-yMG9Vbb8c"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "BXje9iPpaWF2"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importando o dataFrame"
      ],
      "metadata": {
        "id": "9yDTTO0UbXIa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "c5ZcWYkubnQD"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importando Dataframe"
      ],
      "metadata": {
        "id": "B6gs0Sp_eO--"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import data_table\n",
        "data_table.enable_dataframe_formatter()\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/roliveira15/Data_Science_Sales_Forecast/main/base.csv', sep = ';')\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jkotm9KXeRrh",
        "outputId": "f8726dd9-81ad-4301-ef36-b2f4e278d21a"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tipo_frete                      object\n",
              "peso                            object\n",
              "valor_total_pedido              object\n",
              "data                            object\n",
              "abreviatura_uf                  object\n",
              "regiao                          object\n",
              "grupo_gerencial_produto         object\n",
              "conta_numero_pedido_vendedor     int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Converter o peso e o valor em float\n",
        "\n",
        "\n",
        "```\n",
        "# Por padrão todas as variáveis do tipo string são armazenadas como object por esse motivo toda vez que tentamos modifcar de object para str, quando geramos o dtypes, as variáveis permanecem object. https://statisticsglobe.com/convert-object-data-type-string-pandas-dataframe-column-python\n",
        "```\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "3l_iBgojg5nA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['peso'] = df['peso'].str.replace(',','.').astype(float)\n",
        "df['valor_total_pedido'] = df['valor_total_pedido'].str.replace(',','.').astype(float)\n",
        "df['data'] = pd.to_datetime(df['data'])\n",
        "\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B-FtmkB2g8pY",
        "outputId": "3191def9-d72d-46e3-f370-bafa575e03b6"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tipo_frete                              object\n",
              "peso                                   float64\n",
              "valor_total_pedido                     float64\n",
              "data                            datetime64[ns]\n",
              "abreviatura_uf                          object\n",
              "regiao                                  object\n",
              "grupo_gerencial_produto                 object\n",
              "conta_numero_pedido_vendedor             int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Criar uma coluna de Ano e mês"
      ],
      "metadata": {
        "id": "Q4lhJ7LA6Blh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['ano'] = df['data'].dt.year\n",
        "df['mes'] = df['data'].dt.month\n",
        "\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bvqCSZ-X6Dti",
        "outputId": "25ed09d6-6b88-484e-adba-9f4cd3bf5f5d"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tipo_frete                              object\n",
              "peso                                   float64\n",
              "valor_total_pedido                     float64\n",
              "data                            datetime64[ns]\n",
              "abreviatura_uf                          object\n",
              "regiao                                  object\n",
              "grupo_gerencial_produto                 object\n",
              "conta_numero_pedido_vendedor             int64\n",
              "ano                                      int64\n",
              "mes                                      int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Analisando os tipos de estruturas"
      ],
      "metadata": {
        "id": "FLRD4Fokl3GQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "groupStructures = df.groupby(['grupo_gerencial_produto','ano','mes']).sum()\n",
        "groupStructures = groupStructures.round({'valor_total_pedido': 0,'peso': 0}).groupby(['grupo_gerencial_produto','ano','mes']).sum()\n",
        "\n",
        "groupStructures.filter(like = 'PORTA PALLET',axis=0)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9tyJTQRC3hg8",
        "outputId": "55b2e4eb-a7b3-42a0-fe15-1f6518317ff2"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-50-18a37cc90208>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
            "  groupStructures = df.groupby(['grupo_gerencial_produto','ano','mes']).sum()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                        peso  valor_total_pedido  \\\n",
              "grupo_gerencial_produto ano  mes                                   \n",
              "PORTA PALLET            2020 1    19508684.0           4535613.0   \n",
              "                             2     2085986.0           4559766.0   \n",
              "                             3     2103604.0           7146015.0   \n",
              "                             4      967889.0           4661944.0   \n",
              "                             5     1740576.0           7213474.0   \n",
              "                             6    12975136.0          14370510.0   \n",
              "                             7     5017864.0          15849727.0   \n",
              "                             8     4032839.0          26114339.0   \n",
              "                             9     2433024.0          15264778.0   \n",
              "                             10    1196228.0          12552994.0   \n",
              "                             11    2634427.0          18328498.0   \n",
              "                             12    2548060.0          16697700.0   \n",
              "                        2021 1     2476005.0          33239200.0   \n",
              "                             2      344749.0           5100156.0   \n",
              "                             3      662873.0          11352182.0   \n",
              "                             4     1101511.0          18490269.0   \n",
              "                             5     1115988.0          16845303.0   \n",
              "                             6      966436.0          15705210.0   \n",
              "                             7     1464034.0          24461376.0   \n",
              "                             8     1811708.0          31112034.0   \n",
              "                             9     1481201.0          28430451.0   \n",
              "                             10     804790.0          13771243.0   \n",
              "                             11     988999.0          18529842.0   \n",
              "                             12     415456.0           9038261.0   \n",
              "                        2022 1      154164.0           3171467.0   \n",
              "                             2      999014.0          18961784.0   \n",
              "                             3     2592947.0          45607419.0   \n",
              "                             4     1312571.0          23841697.0   \n",
              "                             5     1296057.0          20936982.0   \n",
              "                             6     2583831.0          31562813.0   \n",
              "                             7      596603.0          11590657.0   \n",
              "                             8      948795.0          17056361.0   \n",
              "                             9     1856028.0          33406834.0   \n",
              "                             10    1260389.0          20891887.0   \n",
              "                             11    1827629.0          25933680.0   \n",
              "                             12    2095160.0          29605862.0   \n",
              "                        2023 1      520485.0           7621469.0   \n",
              "                             2      258717.0           4169748.0   \n",
              "                             3     2016009.0          29710909.0   \n",
              "                             4      376956.0           6248661.0   \n",
              "                             5      227475.0           4134871.0   \n",
              "                             6      288123.0           4337447.0   \n",
              "                             7       56629.0            952275.0   \n",
              "                             8       68609.0           1080778.0   \n",
              "                             9       73114.0           1079539.0   \n",
              "                             10      55279.0           1097873.0   \n",
              "                             11     434073.0           4574803.0   \n",
              "                             12     254226.0           3940537.0   \n",
              "\n",
              "                                  conta_numero_pedido_vendedor  \n",
              "grupo_gerencial_produto ano  mes                                \n",
              "PORTA PALLET            2020 1                              53  \n",
              "                             2                              51  \n",
              "                             3                              84  \n",
              "                             4                              76  \n",
              "                             5                              86  \n",
              "                             6                              74  \n",
              "                             7                             121  \n",
              "                             8                             149  \n",
              "                             9                             144  \n",
              "                             10                            109  \n",
              "                             11                            102  \n",
              "                             12                             69  \n",
              "                        2021 1                              87  \n",
              "                             2                              53  \n",
              "                             3                              69  \n",
              "                             4                              79  \n",
              "                             5                              52  \n",
              "                             6                              42  \n",
              "                             7                              45  \n",
              "                             8                              85  \n",
              "                             9                              95  \n",
              "                             10                             78  \n",
              "                             11                             57  \n",
              "                             12                             43  \n",
              "                        2022 1                              38  \n",
              "                             2                              54  \n",
              "                             3                             104  \n",
              "                             4                              79  \n",
              "                             5                              83  \n",
              "                             6                              77  \n",
              "                             7                              80  \n",
              "                             8                             105  \n",
              "                             9                             113  \n",
              "                             10                            114  \n",
              "                             11                            111  \n",
              "                             12                            121  \n",
              "                        2023 1                              63  \n",
              "                             2                              60  \n",
              "                             3                             104  \n",
              "                             4                              59  \n",
              "                             5                              14  \n",
              "                             6                              21  \n",
              "                             7                              14  \n",
              "                             8                              15  \n",
              "                             9                              17  \n",
              "                             10                             18  \n",
              "                             11                             10  \n",
              "                             12                             18  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-031f7b08-9e3d-4c99-bb3d-40398621bc29\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>peso</th>\n",
              "      <th>valor_total_pedido</th>\n",
              "      <th>conta_numero_pedido_vendedor</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>grupo_gerencial_produto</th>\n",
              "      <th>ano</th>\n",
              "      <th>mes</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"48\" valign=\"top\">PORTA PALLET</th>\n",
              "      <th rowspan=\"12\" valign=\"top\">2020</th>\n",
              "      <th>1</th>\n",
              "      <td>19508684.0</td>\n",
              "      <td>4535613.0</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2085986.0</td>\n",
              "      <td>4559766.0</td>\n",
              "      <td>51</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2103604.0</td>\n",
              "      <td>7146015.0</td>\n",
              "      <td>84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>967889.0</td>\n",
              "      <td>4661944.0</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1740576.0</td>\n",
              "      <td>7213474.0</td>\n",
              "      <td>86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>12975136.0</td>\n",
              "      <td>14370510.0</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5017864.0</td>\n",
              "      <td>15849727.0</td>\n",
              "      <td>121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>4032839.0</td>\n",
              "      <td>26114339.0</td>\n",
              "      <td>149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2433024.0</td>\n",
              "      <td>15264778.0</td>\n",
              "      <td>144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1196228.0</td>\n",
              "      <td>12552994.0</td>\n",
              "      <td>109</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2634427.0</td>\n",
              "      <td>18328498.0</td>\n",
              "      <td>102</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2548060.0</td>\n",
              "      <td>16697700.0</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"12\" valign=\"top\">2021</th>\n",
              "      <th>1</th>\n",
              "      <td>2476005.0</td>\n",
              "      <td>33239200.0</td>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>344749.0</td>\n",
              "      <td>5100156.0</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>662873.0</td>\n",
              "      <td>11352182.0</td>\n",
              "      <td>69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1101511.0</td>\n",
              "      <td>18490269.0</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1115988.0</td>\n",
              "      <td>16845303.0</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>966436.0</td>\n",
              "      <td>15705210.0</td>\n",
              "      <td>42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1464034.0</td>\n",
              "      <td>24461376.0</td>\n",
              "      <td>45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1811708.0</td>\n",
              "      <td>31112034.0</td>\n",
              "      <td>85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1481201.0</td>\n",
              "      <td>28430451.0</td>\n",
              "      <td>95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>804790.0</td>\n",
              "      <td>13771243.0</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>988999.0</td>\n",
              "      <td>18529842.0</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>415456.0</td>\n",
              "      <td>9038261.0</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"12\" valign=\"top\">2022</th>\n",
              "      <th>1</th>\n",
              "      <td>154164.0</td>\n",
              "      <td>3171467.0</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>999014.0</td>\n",
              "      <td>18961784.0</td>\n",
              "      <td>54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2592947.0</td>\n",
              "      <td>45607419.0</td>\n",
              "      <td>104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1312571.0</td>\n",
              "      <td>23841697.0</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1296057.0</td>\n",
              "      <td>20936982.0</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2583831.0</td>\n",
              "      <td>31562813.0</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>596603.0</td>\n",
              "      <td>11590657.0</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>948795.0</td>\n",
              "      <td>17056361.0</td>\n",
              "      <td>105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1856028.0</td>\n",
              "      <td>33406834.0</td>\n",
              "      <td>113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>1260389.0</td>\n",
              "      <td>20891887.0</td>\n",
              "      <td>114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1827629.0</td>\n",
              "      <td>25933680.0</td>\n",
              "      <td>111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2095160.0</td>\n",
              "      <td>29605862.0</td>\n",
              "      <td>121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"12\" valign=\"top\">2023</th>\n",
              "      <th>1</th>\n",
              "      <td>520485.0</td>\n",
              "      <td>7621469.0</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>258717.0</td>\n",
              "      <td>4169748.0</td>\n",
              "      <td>60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016009.0</td>\n",
              "      <td>29710909.0</td>\n",
              "      <td>104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>376956.0</td>\n",
              "      <td>6248661.0</td>\n",
              "      <td>59</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>227475.0</td>\n",
              "      <td>4134871.0</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>288123.0</td>\n",
              "      <td>4337447.0</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>56629.0</td>\n",
              "      <td>952275.0</td>\n",
              "      <td>14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>68609.0</td>\n",
              "      <td>1080778.0</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>73114.0</td>\n",
              "      <td>1079539.0</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>55279.0</td>\n",
              "      <td>1097873.0</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>434073.0</td>\n",
              "      <td>4574803.0</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>254226.0</td>\n",
              "      <td>3940537.0</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-031f7b08-9e3d-4c99-bb3d-40398621bc29')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-031f7b08-9e3d-4c99-bb3d-40398621bc29 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-031f7b08-9e3d-4c99-bb3d-40398621bc29');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Separando por tipo de estrutura"
      ],
      "metadata": {
        "id": "g231cE95FpDM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pp = groupStructures.query(\"grupo_gerencial_produto=='PORTA PALLET' and valor_total_pedido >= 0\")\n",
        "\n",
        "\n",
        "\n",
        "print(pp.dtypes)\n",
        "\n",
        "#df.set_index('day', inplace=True)\n",
        "\n",
        "#group data by product and display sales as line chart\n",
        "#df.groupStructures.round({'grupo_gerencial_produto': 0,'ano': 0, 'valor_total_pedido': 0}).groupby(['grupo_gerencial_produto','ano']).sum().[]plot(legend=True)\n",
        "\n",
        "plt.figure(figsize=(16,8))\n",
        "plt.plot(pp['ano'],1)\n",
        "plt.xlabel('Time on Website')\n",
        "plt.ylabel('Yearly ammount Spent');\n",
        "\n",
        "\n",
        "\n",
        "'''\n",
        "pp['ano']\n",
        "plt.figure(figsize=(16,8))\n",
        "plt.plot(pp['ano'], pp['valor_total_pedido'])\n",
        "plt.xlabel('Time on Website')\n",
        "plt.ylabel('Yearly ammount Spent');\n",
        "\n",
        "'''\n",
        "'''\n",
        "\n",
        "for i in range(len(groupStructures)):\n",
        "  arrayProduct.extend([i]) == groupStructures[i]\n",
        "  groupStructures \n",
        "  df.query(\"`Courses Fee` >= 23000 and `Courses Fee` <= 24000\")\n",
        "  i=i+1\n",
        "  print(i)\n",
        "\n",
        "df.query(\"`Courses Fee` >= 23000 and `Courses Fee` <= 24000\")\n",
        "\n",
        "# Other ways to Filter Rows\n",
        "df.loc[df['Courses'] == value]\n",
        "df.loc[df['Courses'] != 'Spark']\n",
        "df.loc[df['Courses'].isin(values)]\n",
        "df.loc[~df['Courses'].isin(values)]\n",
        "df.loc[(df['Discount'] >= 1000) & (df['Discount'] <= 2000)]\n",
        "\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "Cgl5OR6iFsrZ",
        "outputId": "bd47e33a-0f7b-43fc-8c8e-0b7722e80974"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "peso                            float64\n",
            "valor_total_pedido              float64\n",
            "conta_numero_pedido_vendedor      int64\n",
            "dtype: object\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'ano'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-16-c484901968b5>\u001b[0m in \u001b[0;36m<cell line: 10>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpp\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ano'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Time on Website'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Yearly ammount Spent'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3805\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3807\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3808\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3809\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'ano'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realizar a plotagem de todos os grupos para entender o comportadomento dos gráficos"
      ],
      "metadata": {
        "id": "UxaOMTcJ5SJS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#groupStructures.plot.area();\n",
        "\n",
        "filterPP = df.query(\"grupo_gerencial_produto = PORTA PALLETE and `Courses Fee` <= 24000\")\n",
        "\n",
        "\n",
        "groupStructures.figure();\n",
        "\n",
        "ts.plot(style=\"k--\", label=\"Series\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 829
        },
        "id": "WVLms6o871oi",
        "outputId": "c1d0ffc8-cbeb-4eeb-d8ec-14155e6cbb42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "Traceback \u001b[0;36m(most recent call last)\u001b[0m:\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\"\u001b[0m, line \u001b[1;32m3553\u001b[0m, in \u001b[1;35mrun_code\u001b[0m\n    exec(code_obj, self.user_global_ns, self.user_ns)\n",
            "  File \u001b[1;32m\"<ipython-input-108-fa66055de314>\"\u001b[0m, line \u001b[1;32m3\u001b[0m, in \u001b[1;35m<cell line: 3>\u001b[0m\n    filterPP = df.query(\"grupo_gerencial_produto = PORTA PALLETE and `Courses Fee` <= 24000\")\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\"\u001b[0m, line \u001b[1;32m331\u001b[0m, in \u001b[1;35mwrapper\u001b[0m\n    return func(*args, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\"\u001b[0m, line \u001b[1;32m4474\u001b[0m, in \u001b[1;35mquery\u001b[0m\n    res = self.eval(expr, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\"\u001b[0m, line \u001b[1;32m331\u001b[0m, in \u001b[1;35mwrapper\u001b[0m\n    return func(*args, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\"\u001b[0m, line \u001b[1;32m4612\u001b[0m, in \u001b[1;35meval\u001b[0m\n    return _eval(expr, inplace=inplace, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/eval.py\"\u001b[0m, line \u001b[1;32m353\u001b[0m, in \u001b[1;35meval\u001b[0m\n    parsed_expr = Expr(expr, engine=engine, parser=parser, env=env)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m813\u001b[0m, in \u001b[1;35m__init__\u001b[0m\n    self.terms = self.parse()\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m832\u001b[0m, in \u001b[1;35mparse\u001b[0m\n    return self._visitor.visit(self.expr)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m411\u001b[0m, in \u001b[1;35mvisit\u001b[0m\n    raise e\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m407\u001b[0m, in \u001b[1;35mvisit\u001b[0m\n    node = ast.fix_missing_locations(ast.parse(clean))\n",
            "\u001b[0;36m  File \u001b[0;32m\"/usr/lib/python3.10/ast.py\"\u001b[0;36m, line \u001b[0;32m50\u001b[0;36m, in \u001b[0;35mparse\u001b[0;36m\u001b[0m\n\u001b[0;31m    return compile(source, filename, mode, flags,\u001b[0m\n",
            "\u001b[0;36m  File \u001b[0;32m\"<unknown>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    grupo_gerencial_produto =PORTA PALLETE and  BACKTICK_QUOTED_STRING_Courses_Fee <=24000\u001b[0m\n\u001b[0m                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Python keyword not valid identifier in numexpr query\n"
          ]
        }
      ]
    }
  ]
}