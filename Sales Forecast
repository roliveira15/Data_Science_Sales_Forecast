{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "147q9AYrm_zb_su0oEU1Wm2EKZytfBXT3",
      "authorship_tag": "ABX9TyMMhaT4vCvzX/4zu4ovhGaY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/roliveira15/Data_Science_Sales_Forecast/blob/main/Sales%20Forecast\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Carregando as bibliotecas"
      ],
      "metadata": {
        "id": "MD-yMG9Vbb8c"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "BXje9iPpaWF2"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importando o dataFrame"
      ],
      "metadata": {
        "id": "9yDTTO0UbXIa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "c5ZcWYkubnQD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Importando Dataframe"
      ],
      "metadata": {
        "id": "B6gs0Sp_eO--"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import data_table\n",
        "data_table.enable_dataframe_formatter()\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/roliveira15/Data_Science_Sales_Forecast/main/base.csv', sep = ';')\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jkotm9KXeRrh",
        "outputId": "f789accb-dd5d-40b8-e91c-250b426a0814"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tipo_frete                      object\n",
              "peso                            object\n",
              "valor_total_pedido              object\n",
              "data                            object\n",
              "abreviatura_uf                  object\n",
              "regiao                          object\n",
              "grupo_gerencial_produto         object\n",
              "conta_numero_pedido_vendedor     int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 133
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Converter o peso e o valor em float\n",
        "\n",
        "\n",
        "```\n",
        "# Por padrão todas as variáveis do tipo string são armazenadas como object por esse motivo toda vez que tentamos modifcar de object para str, quando geramos o dtypes, as variáveis permanecem object. https://statisticsglobe.com/convert-object-data-type-string-pandas-dataframe-column-python\n",
        "```\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "3l_iBgojg5nA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['peso'] = df['peso'].str.replace(',','.').astype(float)\n",
        "df['valor_total_pedido'] = df['valor_total_pedido'].str.replace(',','.').astype(float)\n",
        "df['data'] = pd.to_datetime(df['data'])\n",
        "\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B-FtmkB2g8pY",
        "outputId": "2c811b00-e367-40e2-9207-d5e3ef141245"
      },
      "execution_count": 134,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tipo_frete                              object\n",
              "peso                                   float64\n",
              "valor_total_pedido                     float64\n",
              "data                            datetime64[ns]\n",
              "abreviatura_uf                          object\n",
              "regiao                                  object\n",
              "grupo_gerencial_produto                 object\n",
              "conta_numero_pedido_vendedor             int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Criar uma coluna de Ano e mês"
      ],
      "metadata": {
        "id": "Q4lhJ7LA6Blh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['ano'] = df['data'].dt.year\n",
        "df['mes'] = df['data'].dt.month\n",
        "\n",
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bvqCSZ-X6Dti",
        "outputId": "f6cc6471-832c-4fde-afde-649c3ac7b4bf"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tipo_frete                              object\n",
              "peso                                   float64\n",
              "valor_total_pedido                     float64\n",
              "data                            datetime64[ns]\n",
              "abreviatura_uf                          object\n",
              "regiao                                  object\n",
              "grupo_gerencial_produto                 object\n",
              "conta_numero_pedido_vendedor             int64\n",
              "ano                                      int64\n",
              "mes                                      int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Analisando os tipos de estruturas"
      ],
      "metadata": {
        "id": "FLRD4Fokl3GQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "groupStructures = df.groupby(['grupo_gerencial_produto','ano','mes']).sum()#.agg(lambda x: list(set(x))).reset_index()\n",
        "#groupStructures.groupby(by=['grupo_gerencial_produto'])['valor_total_pedido'].apply(tuple)\n",
        "\n",
        "groupStructures = groupStructures.round({'grupo_gerencial_produto': 0,'ano': 0, 'valor_total_pedido': 0}).groupby(['grupo_gerencial_produto','ano']).sum()\n",
        "groupStructures\n",
        "\n",
        "#groupStructures = df.dataframe(data=groupStructures)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        },
        "id": "9tyJTQRC3hg8",
        "outputId": "2cd9b2f8-6bc6-42bf-c9a8-619859a9dddb"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-189-f8ee3419047c>:1: FutureWarning: The default value of numeric_only in DataFrameGroupBy.sum is deprecated. In a future version, numeric_only will default to False. Either specify numeric_only or select only columns which should be valid for the function.\n",
            "  groupStructures = df.groupby(['grupo_gerencial_produto','ano','mes']).sum()#.agg(lambda x: list(set(x))).reset_index()\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                      peso  valor_total_pedido  \\\n",
              "grupo_gerencial_produto ano                                      \n",
              "AUTOMACAO               2020    9334.71410           1053141.0   \n",
              "                        2021   28120.25000           8551183.0   \n",
              "                        2022   12471.40400           2616275.0   \n",
              "                        2023   22419.19600           8022315.0   \n",
              "AUTOPORTANTE            2020  373461.03446           3982847.0   \n",
              "...                                    ...                 ...   \n",
              "TUBOS                   2020    2695.00000             13753.0   \n",
              "UNIVERSAL               2020  260820.05000           4490362.0   \n",
              "                        2021  120486.79400            825397.0   \n",
              "                        2022  385471.00000            806759.0   \n",
              "                        2023  124353.50000            208545.0   \n",
              "\n",
              "                              conta_numero_pedido_vendedor  \n",
              "grupo_gerencial_produto ano                                 \n",
              "AUTOMACAO               2020                             6  \n",
              "                        2021                            11  \n",
              "                        2022                             7  \n",
              "                        2023                             9  \n",
              "AUTOPORTANTE            2020                            11  \n",
              "...                                                    ...  \n",
              "TUBOS                   2020                             1  \n",
              "UNIVERSAL               2020                           175  \n",
              "                        2021                             5  \n",
              "                        2022                            46  \n",
              "                        2023                            17  \n",
              "\n",
              "[75 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-87f2ed27-fc19-4940-89e8-ccc07e501aaf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>peso</th>\n",
              "      <th>valor_total_pedido</th>\n",
              "      <th>conta_numero_pedido_vendedor</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>grupo_gerencial_produto</th>\n",
              "      <th>ano</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">AUTOMACAO</th>\n",
              "      <th>2020</th>\n",
              "      <td>9334.71410</td>\n",
              "      <td>1053141.0</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021</th>\n",
              "      <td>28120.25000</td>\n",
              "      <td>8551183.0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022</th>\n",
              "      <td>12471.40400</td>\n",
              "      <td>2616275.0</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023</th>\n",
              "      <td>22419.19600</td>\n",
              "      <td>8022315.0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AUTOPORTANTE</th>\n",
              "      <th>2020</th>\n",
              "      <td>373461.03446</td>\n",
              "      <td>3982847.0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TUBOS</th>\n",
              "      <th>2020</th>\n",
              "      <td>2695.00000</td>\n",
              "      <td>13753.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">UNIVERSAL</th>\n",
              "      <th>2020</th>\n",
              "      <td>260820.05000</td>\n",
              "      <td>4490362.0</td>\n",
              "      <td>175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021</th>\n",
              "      <td>120486.79400</td>\n",
              "      <td>825397.0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022</th>\n",
              "      <td>385471.00000</td>\n",
              "      <td>806759.0</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023</th>\n",
              "      <td>124353.50000</td>\n",
              "      <td>208545.0</td>\n",
              "      <td>17</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>75 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87f2ed27-fc19-4940-89e8-ccc07e501aaf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-87f2ed27-fc19-4940-89e8-ccc07e501aaf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-87f2ed27-fc19-4940-89e8-ccc07e501aaf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Separando por tipo de estrutura"
      ],
      "metadata": {
        "id": "g231cE95FpDM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pp = groupStructures.query(\"grupo_gerencial_produto=='PORTA PALLET' and valor_total_pedido >= 0\")\n",
        "print(pp.dtypes)\n",
        "\n",
        "df.set_index('day', inplace=True)\n",
        "\n",
        "#group data by product and display sales as line chart\n",
        "df.groupStructures.round({'grupo_gerencial_produto': 0,'ano': 0, 'valor_total_pedido': 0}).groupby(['grupo_gerencial_produto','ano']).sum().['sales'].plot(legend=True)\n",
        "'''\n",
        "pp['ano']\n",
        "plt.figure(figsize=(16,8))\n",
        "plt.plot(pp['ano'], pp['valor_total_pedido'])\n",
        "plt.xlabel('Time on Website')\n",
        "plt.ylabel('Yearly ammount Spent');\n",
        "\n",
        "'''\n",
        "'''\n",
        "\n",
        "for i in range(len(groupStructures)):\n",
        "  arrayProduct.extend([i]) == groupStructures[i]\n",
        "  groupStructures \n",
        "  df.query(\"`Courses Fee` >= 23000 and `Courses Fee` <= 24000\")\n",
        "  i=i+1\n",
        "  print(i)\n",
        "\n",
        "df.query(\"`Courses Fee` >= 23000 and `Courses Fee` <= 24000\")\n",
        "\n",
        "# Other ways to Filter Rows\n",
        "df.loc[df['Courses'] == value]\n",
        "df.loc[df['Courses'] != 'Spark']\n",
        "df.loc[df['Courses'].isin(values)]\n",
        "df.loc[~df['Courses'].isin(values)]\n",
        "df.loc[(df['Discount'] >= 1000) & (df['Discount'] <= 2000)]\n",
        "\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 171
        },
        "id": "Cgl5OR6iFsrZ",
        "outputId": "d9731f8c-97dd-4608-a83f-b364a2be3b1e"
      },
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-210-c28bb8bf9a58>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    df.groupStructures.round({'grupo_gerencial_produto': 0,'ano': 0, 'valor_total_pedido': 0}).groupby(['grupo_gerencial_produto','ano']).sum().['sales'].plot(legend=True)\u001b[0m\n\u001b[0m                                                                                                                                                ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realizar a plotagem de todos os grupos para entender o comportadomento dos gráficos"
      ],
      "metadata": {
        "id": "UxaOMTcJ5SJS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#groupStructures.plot.area();\n",
        "\n",
        "filterPP = df.query(\"grupo_gerencial_produto = PORTA PALLETE and `Courses Fee` <= 24000\")\n",
        "\n",
        "\n",
        "groupStructures.figure();\n",
        "\n",
        "ts.plot(style=\"k--\", label=\"Series\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 829
        },
        "id": "WVLms6o871oi",
        "outputId": "c1d0ffc8-cbeb-4eeb-d8ec-14155e6cbb42"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "ignored",
          "traceback": [
            "Traceback \u001b[0;36m(most recent call last)\u001b[0m:\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\"\u001b[0m, line \u001b[1;32m3553\u001b[0m, in \u001b[1;35mrun_code\u001b[0m\n    exec(code_obj, self.user_global_ns, self.user_ns)\n",
            "  File \u001b[1;32m\"<ipython-input-108-fa66055de314>\"\u001b[0m, line \u001b[1;32m3\u001b[0m, in \u001b[1;35m<cell line: 3>\u001b[0m\n    filterPP = df.query(\"grupo_gerencial_produto = PORTA PALLETE and `Courses Fee` <= 24000\")\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\"\u001b[0m, line \u001b[1;32m331\u001b[0m, in \u001b[1;35mwrapper\u001b[0m\n    return func(*args, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\"\u001b[0m, line \u001b[1;32m4474\u001b[0m, in \u001b[1;35mquery\u001b[0m\n    res = self.eval(expr, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/util/_decorators.py\"\u001b[0m, line \u001b[1;32m331\u001b[0m, in \u001b[1;35mwrapper\u001b[0m\n    return func(*args, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\"\u001b[0m, line \u001b[1;32m4612\u001b[0m, in \u001b[1;35meval\u001b[0m\n    return _eval(expr, inplace=inplace, **kwargs)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/eval.py\"\u001b[0m, line \u001b[1;32m353\u001b[0m, in \u001b[1;35meval\u001b[0m\n    parsed_expr = Expr(expr, engine=engine, parser=parser, env=env)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m813\u001b[0m, in \u001b[1;35m__init__\u001b[0m\n    self.terms = self.parse()\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m832\u001b[0m, in \u001b[1;35mparse\u001b[0m\n    return self._visitor.visit(self.expr)\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m411\u001b[0m, in \u001b[1;35mvisit\u001b[0m\n    raise e\n",
            "  File \u001b[1;32m\"/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expr.py\"\u001b[0m, line \u001b[1;32m407\u001b[0m, in \u001b[1;35mvisit\u001b[0m\n    node = ast.fix_missing_locations(ast.parse(clean))\n",
            "\u001b[0;36m  File \u001b[0;32m\"/usr/lib/python3.10/ast.py\"\u001b[0;36m, line \u001b[0;32m50\u001b[0;36m, in \u001b[0;35mparse\u001b[0;36m\u001b[0m\n\u001b[0;31m    return compile(source, filename, mode, flags,\u001b[0m\n",
            "\u001b[0;36m  File \u001b[0;32m\"<unknown>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    grupo_gerencial_produto =PORTA PALLETE and  BACKTICK_QUOTED_STRING_Courses_Fee <=24000\u001b[0m\n\u001b[0m                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m Python keyword not valid identifier in numexpr query\n"
          ]
        }
      ]
    }
  ]
}